import mysql.connector
from mysql.connector import Error
from datetime import datetime

DB_CONFIG = {
    'host': '107.109.40.131:3306',
    'database': 'gh_v3_prd',
    'user': 'root',
    'password': 'DBpoum0&8'
}

def read_existing_projects(file_path):
    """Read existing projects from output.txt file"""
    existing_projects = set()
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            next(f)  # Skip header
            for line in f:
                parts = line.strip().split('\t')
                if len(parts) >= 2:
                    existing_projects.add((parts[0].strip(), parts[1].strip()))  # (title, code)
    except FileNotFoundError:
        print("Existing output file not found. Treating as empty.")
    return existing_projects

def get_db_projects(connection):
    """Get current projects from database"""
    cursor = connection.cursor()
    cursor.execute("SELECT title, code, project_level FROM project WHERE project_level != 'project'")
    db_projects = set()
    for title, code, _ in cursor.fetchall():
        db_projects.add((str(title).strip(), str(code).strip()))
    cursor.close()
    return db_projects

def find_differences(existing, current):
    """Find new and removed projects"""
    new_projects = current - existing
    removed_projects = existing - current
    return new_projects, removed_projects

def generate_report(new_projects, removed_projects):
    """Generate a detailed report of differences"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    with open('project_differences.txt', 'w', encoding='utf-8') as report_file:
        # Header with timestamp and summary
        report_file.write(f"Project Comparison Report - {timestamp}\n")
        report_file.write("="*50 + "\n\n")
        report_file.write(f"Summary:\n")
        report_file.write(f"- New Projects: {len(new_projects)}\n")
        report_file.write(f"- Removed Projects: {len(removed_projects)}\n\n")
        
        # New Projects Section
        report_file.write("=== New Projects ===\n")
        report_file.write(f"Count: {len(new_projects)}\n\n")
        for i, (title, code) in enumerate(sorted(new_projects), 1):
            report_file.write(f"{i}. {title}\t{code}\n")
        
        # Removed Projects Section
        report_file.write("\n=== Removed Projects ===\n")
        report_file.write(f"Count: {len(removed_projects)}\n\n")
        for i, (title, code) in enumerate(sorted(removed_projects), 1):
            report_file.write(f"{i}. {title}\t{code}\n")
        
        # Footer
        report_file.write("\n" + "="*50 + "\n")
        report_file.write("Report generated by Project Comparison Tool\n")

def main():
    try:
        # Split host and port
        host_parts = DB_CONFIG['host'].split(':')
        host = host_parts[0]
        port = int(host_parts[1])
        
        # Establish connection
        connection = mysql.connector.connect(
            host=host,
            port=port,
            database=DB_CONFIG['database'],
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password']
        )
        
        # Read existing projects
        existing_file = r'C:\Users\sonu.km\Desktop\basefile\sql_py_reader_bot\report-bot\projectUpdated\output.txt'
        existing_projects = read_existing_projects(existing_file)
        
        # Get current projects from DB
        db_projects = get_db_projects(connection)
        
        # Find differences
        new_projects, removed_projects = find_differences(existing_projects, db_projects)
        
        # Generate enhanced report
        generate_report(new_projects, removed_projects)
        
        # Print summary to console
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"\nProject Comparison Report - {timestamp}")
        print("="*50)
        print(f"Summary Statistics:")
        print(f"- Total existing projects: {len(existing_projects)}")
        print(f"- Total current projects: {len(db_projects)}")
        print(f"- New projects detected: {len(new_projects)}")
        print(f"- Removed projects detected: {len(removed_projects)}")
        print("\nDetailed report saved to 'project_differences.txt'")

    except Error as e:
        print(f"Database error: {e}")
        
    finally:
        if 'connection' in locals() and connection.is_connected():
            connection.close()
            print("\nMySQL connection is closed")

if __name__ == "__main__":
    main()